[
["organising-an-r-project-at-grttan.html", "4 Organising an R project at Grttan 4.1 Use RStudio projects, not setwd() 4.2 Keep your stuff together 4.3 Use relative filepaths 4.4 Grattan coding style guide 4.5 Resources in this package", " 4 Organising an R project at Grttan All our work, in R or otherwise, should heed the “hit by a bus” rule - if you’re not around, colleagues should be able to access, understand, verify, and build on the work you’ve done. Organising your analysis in a predictable, consistent way helps to make your work reproducible by others, including yourself in the future. This is really important! If your analysis is messy, you’re more likely to make errors, and less likely to spot them. Other people will find it hard to check your analysis and you’ll find it harder to return to it down the track. This page sets out some guidelines for organising your work in R at Grattan. It covers: Using RStudio projects and relative filepaths Using a consistent subfolder structure Naming your scripts and keeping them manageable Coding style at Grattan 4.1 Use RStudio projects, not setwd() You’ll almost always be reading and/or writing files to disk as part of your analysis in R. To do this, R needs to know where to read files from and save files to. By default, it uses your working directory. One way to tell R which folder to use as your working directory is using the command setwd(), like setwd(\"~/Desktop/some random folder\") or setwd(\"C:\\Users\\mcowgill\\Documents\\Somerandomfolder\"). This is a bad idea! If anyone - including you - tries to run your script on a different machine, with a different folder structure, it probably won’t work. If people can’t get past the first line when they’re trying to run your script, there’s an annoying and unnecessary hurdle to reproducing and checking your analysis. In the words of Jenny Bryan: if the first line of your R script is setwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\") I will come into your office and SET YOUR COMPUTER ON FIRE. Seems fair. Creating a ‘project’ in RStudio sets your working directory in a way that’s portable across machines. Creating an RStudio project is straightforward: click File, then New Project. You can then choose to start your project in a new directory, or an existing directory. Simple! RStudio will then create a file with an .Rproj extension in the folder you’ve chosen. When you want to work in this project, just open the .Rproj file, or click File -&gt; Open project in RStudio. Your working directory will be set to the directory that contains the .Rproj file. 4.2 Keep your stuff together Your script(s), data, and output should generally all live in the same place.1 That place should be the folder that contains the .Rproj file that was created when you created an RStudio project, and subfolders of that folder. Don’t just put everything in your project folder itself. This can get really overwhelming and confusing, particularly for anyone trying to understand and check your work. Instead, separate your code, your source data, and your output into subfolders. A good structure is to have: a subfolder for your code - called ‘R’ or ‘code’. my_project/ ├── R/ ├── data/ ├── doc/ ├── figs/ └── output/ 4.3 Use relative filepaths When you read or write files with R, don’t use filepaths that are specific to your machine. Bad hes &lt;- read_csv(&quot;/Users/mcowgill/Desktop/hes1516.csv&quot;) hes &lt;- read_csb(&quot;C:\\Users\\mcowgill\\Desktop\\hes1516.csv&quot;) grattan_save(&quot;/Users/mcowgill/Desktop/images/expenditure_by_income.pdf&quot;) Instead, use relative filepaths. These are filepaths that are relative (hence the name) to your project folder, which you set by creating an RStudio project. Good hes &lt;- read_csv(&quot;data/HES/hes1516.csv&quot;) grattan_save(&quot;images/expenditure_by_income.pdf&quot;) The first example above tells R to look in the ‘data’ subdirectory of your project folder, and then the ‘HES’ subdirectory of ‘data’, to find the ‘hes1516.csv’ file. This file path isn’t specific to your machine, so your code is more shareable this way. 4.3.1 Keep your scripts manageable As a general rule of thumb, use one script per output. It should be clear what your script is trying to do (use comments!). Consider breaking your analysis into pieces. For example: 01_import.R 02_tidy.R 03_model.R 04_visualise.R Don’t include interactive work (like View(mydf), str(mydf), mean(mydf$variable), etc.) in your saved script. 4.3.2 Use subfolders of your project folder Remember the hit-by-a-bus rule. It should be easy for any Grattan colleague to open your project folder and get up to speed with what it does. Putting all your files - raw data, scripts, output - in the one folder makes it harder to understand how your work fits together. Use subfolders to clearly separate your code, raw data, and output. 4.4 Grattan coding style guide Short summary of why Link to style guide 4.5 Resources in this package Starting a piece of analysis ‘cheat sheet’. Updated style guide. Written guide/slides. "]
]
